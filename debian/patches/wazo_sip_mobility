Index: asterisk-18.10.1/res/res_pjsip/location.c
===================================================================
--- asterisk-18.10.1.orig/res/res_pjsip/location.c
+++ asterisk-18.10.1/res/res_pjsip/location.c
@@ -355,7 +355,7 @@ struct ast_sip_contact *ast_sip_location
 struct ast_sip_contact *ast_sip_location_create_contact(struct ast_sip_aor *aor,
 	const char *uri, struct timeval expiration_time, const char *path_info,
 	const char *user_agent, const char *via_addr, int via_port, const char *call_id,
-	int prune_on_boot, struct ast_sip_endpoint *endpoint)
+	int prune_on_boot, struct ast_sip_endpoint *endpoint, const char* mobility)
 {
 	struct ast_sip_contact *contact;
 	char name[MAX_OBJECT_FIELD * 2 + 3];
@@ -399,6 +399,10 @@ struct ast_sip_contact *ast_sip_location
 		ast_string_field_set(contact, call_id, call_id);
 	}
 
+	if (!ast_strlen_zero(mobility)) {
+		ast_string_field_set(contact, mobility, mobility);
+	}
+
 	contact->endpoint = ao2_bump(endpoint);
 	if (endpoint) {
 		ast_string_field_set(contact, endpoint_name, ast_sorcery_object_get_id(endpoint));
@@ -419,9 +423,8 @@ int ast_sip_location_add_contact_nolock(
 		struct ast_sip_endpoint *endpoint)
 {
 	struct ast_sip_contact *contact;
-
 	contact = ast_sip_location_create_contact(aor, uri, expiration_time, path_info,
-		user_agent, via_addr, via_port, call_id, 0, endpoint);
+		user_agent, via_addr, via_port, call_id, 0, endpoint, NULL);
 	ao2_cleanup(contact);
 	return contact ? 0 : -1;
 }
@@ -1400,6 +1403,7 @@ int ast_sip_initialize_sorcery_location(
 	ast_sorcery_object_field_register(sorcery, "contact", "via_port", "0", OPT_UINT_T, 0, FLDSET(struct ast_sip_contact, via_port));
 	ast_sorcery_object_field_register(sorcery, "contact", "call_id", "", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_sip_contact, call_id));
 	ast_sorcery_object_field_register(sorcery, "contact", "prune_on_boot", "no", OPT_YESNO_T, 1, FLDSET(struct ast_sip_contact, prune_on_boot));
+	ast_sorcery_object_field_register(sorcery, "contact", "mobility", "", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_sip_contact, mobility));
 
 	ast_sorcery_object_field_register(sorcery, "aor", "type", "", OPT_NOOP_T, 0, 0);
 	ast_sorcery_object_field_register(sorcery, "aor", "minimum_expiration", "60", OPT_UINT_T, 0, FLDSET(struct ast_sip_aor, minimum_expiration));
Index: asterisk-18.10.1/res/res_pjsip_registrar.c
===================================================================
--- asterisk-18.10.1.orig/res/res_pjsip_registrar.c
+++ asterisk-18.10.1/res/res_pjsip_registrar.c
@@ -843,6 +843,9 @@ static void register_aor_core(pjsip_rx_d
 
 		if (!contact) {
 			int prune_on_boot;
+			char* mobility = NULL;
+			pj_str_t mobility_str = pj_str("mobility");
+			pjsip_param* mobility_param = NULL;
 
 			/* If they are actually trying to delete a contact that does not exist... be forgiving */
 			if (!expiration) {
@@ -851,12 +854,19 @@ static void register_aor_core(pjsip_rx_d
 				continue;
 			}
 
+			mobility_param = pjsip_param_find(&contact_hdr->other_param, &mobility_str);
+			if (mobility_param) {
+				ast_copy_pj_str2(&mobility, &mobility_param->value);
+			}
+
 			prune_on_boot = !ast_sip_will_uri_survive_restart(details.uri, endpoint, rdata);
 
 			contact = ast_sip_location_create_contact(aor, contact_uri,
 				ast_tvadd(ast_tvnow(), ast_samp2tv(expiration, 1)),
 				path_str ? ast_str_buffer(path_str) : NULL,
-				user_agent, via_addr, via_port, call_id, prune_on_boot, endpoint);
+				user_agent, via_addr, via_port, call_id, prune_on_boot, endpoint, mobility);
+			ast_free(mobility);
+
 			if (!contact) {
 				ast_log(LOG_ERROR, "Unable to bind contact '%s' to AOR '%s'\n",
 					contact_uri, aor_name);
Index: asterisk-18.10.1/include/asterisk/res_pjsip.h
===================================================================
--- asterisk-18.10.1.orig/include/asterisk/res_pjsip.h
+++ asterisk-18.10.1/include/asterisk/res_pjsip.h
@@ -316,6 +316,8 @@ struct ast_sip_contact {
 		AST_STRING_FIELD(call_id);
 		/*! The name of the endpoint that added the contact */
 		AST_STRING_FIELD(endpoint_name);
+		/*! The SIP mobility feature */
+		AST_STRING_FIELD(mobility);
 	);
 	/*! Absolute time that this contact is no longer valid after */
 	struct timeval expiration_time;
@@ -1499,7 +1501,7 @@ int ast_sip_location_add_contact_nolock(
 struct ast_sip_contact *ast_sip_location_create_contact(struct ast_sip_aor *aor,
 	const char *uri, struct timeval expiration_time, const char *path_info,
 	const char *user_agent, const char *via_addr, int via_port, const char *call_id,
-	int prune_on_boot, struct ast_sip_endpoint *endpoint);
+	int prune_on_boot, struct ast_sip_endpoint *endpoint, const char* mobility);
 
 /*!
  * \brief Update a contact
Index: asterisk-18.10.1/res/res_pjsip.c
===================================================================
--- asterisk-18.10.1.orig/res/res_pjsip.c
+++ asterisk-18.10.1/res/res_pjsip.c
@@ -1932,6 +1932,12 @@
 						on a reliable transport and is not intended to be configured manually.
 					</para></description>
 				</configOption>
+				<configOption name="mobility">
+					<synopsis>If a contact is 'mobile' or 'fixed'.</synopsis>
+					<description><para>
+						Can take values 'mobile' or 'fixed' depending on the type of contact.
+					</para></description>
+				</configOption>
 			</configObject>
 			<configObject name="aor">
 				<synopsis>The configuration for a location of an endpoint</synopsis>
