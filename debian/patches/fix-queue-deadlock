Index: asterisk-22.2.0/apps/app_queue.c
===================================================================
--- asterisk-22.2.0.orig/apps/app_queue.c
+++ asterisk-22.2.0/apps/app_queue.c
@@ -2914,6 +2914,8 @@ static void device_state_cb(void *unused
 	int found = 0;			/* Found this member in any queue */
 	int found_member;		/* Found this member in this queue */
 	int avail = 0;			/* Found an available member in this queue */
+	int i;
+	int max_lock_tries = 32;
 
 	if (ast_device_state_message_type() != stasis_message_type(msg)) {
 		return;
@@ -2927,7 +2929,13 @@ static void device_state_cb(void *unused
 
 	qiter = ao2_iterator_init(queues, 0);
 	while ((q = ao2_t_iterator_next(&qiter, "Iterate over queues"))) {
-		ao2_lock(q);
+		for (i = 0; ao2_trylock(q) && i < max_lock_tries; i++) {
+			usleep(10);
+		}
+		if (i == max_lock_tries) {
+			ast_log(LOG_WARNING, "Can't get a lock on queue %s; skipping update.\n", q->name);
+			continue;
+		}
 
 		avail = 0;
 		found_member = 0;
@@ -3076,6 +3084,8 @@ static int extension_state_cb(const char
 	struct call_queue *q;
 	int state = info->exten_state;
 	int found = 0, device_state = extensionstate2devicestate(state);
+	int i;
+	int max_lock_tries = 32;
 
 	/* only interested in extension state updates involving device states */
 	if (info->reason != AST_HINT_UPDATE_DEVICE) {
@@ -3084,7 +3094,13 @@ static int extension_state_cb(const char
 
 	qiter = ao2_iterator_init(queues, 0);
 	while ((q = ao2_t_iterator_next(&qiter, "Iterate through queues"))) {
-		ao2_lock(q);
+		for (i = 0; ao2_trylock(q) && i < max_lock_tries; i++) {
+			usleep(10);
+		}
+		if (i == max_lock_tries) {
+			ast_log(LOG_WARNING, "Can't get a lock on queue %s; skipping update.\n", q->name);
+			continue;
+		}
 
 		miter = ao2_iterator_init(q->members, 0);
 		for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {
@@ -6310,6 +6326,8 @@ static int update_queue(struct call_queu
 	struct member *mem;
 	struct call_queue *qtmp;
 	struct ao2_iterator queue_iter;
+	int i;
+	int max_lock_tries = 32;
 
 	/* It is possible for us to be called when a call has already been considered terminated
 	 * and data updated, so to ensure we only act on the call that the agent is currently in
@@ -6322,7 +6340,13 @@ static int update_queue(struct call_queu
 	if (shared_lastcall) {
 		queue_iter = ao2_iterator_init(queues, 0);
 		while ((qtmp = ao2_t_iterator_next(&queue_iter, "Iterate through queues"))) {
-			ao2_lock(qtmp);
+			for (i = 0; ao2_trylock(qtmp) && i < max_lock_tries; i++) {
+				usleep(10);
+			}
+			if (i == max_lock_tries) {
+				ast_log(LOG_WARNING, "Can't get a lock on queue %s; skipping update.\n", qtmp->name);
+				continue;
+			}
 			if ((mem = ao2_find(qtmp->members, member, OBJ_POINTER))) {
 				time(&mem->lastcall);
 				mem->calls++;
