Index: asterisk-22.0.0/apps/app_mixmonitor.c
===================================================================
--- asterisk-22.0.0.orig/apps/app_mixmonitor.c
+++ asterisk-22.0.0/apps/app_mixmonitor.c
@@ -962,6 +962,8 @@ static int launch_monitor_thread(struct
 	struct mixmonitor *mixmonitor;
 	char postprocess2[1024] = "";
 	char *datastore_id = NULL;
+	RAII_VAR(struct stasis_message *, message, NULL, ao2_cleanup);
+	RAII_VAR(struct ast_json *, blob, NULL, ast_json_unref);
 
 	postprocess2[0] = 0;
 	/* If a post process system command is given attach it to the structure */
@@ -1099,6 +1101,15 @@ static int launch_monitor_thread(struct
 		mixmonitor_free(mixmonitor);
 		return -1;
 	}
+	blob = ast_json_pack("{s: s, s: s}",
+		"filename", filename,
+		"mixmonitor_id", datastore_id);
+	message = ast_channel_blob_create_from_cache(ast_channel_uniqueid(chan),
+		ast_channel_mixmonitor_start_type(),
+		blob);
+	if (message) {
+		stasis_publish(ast_channel_topic(chan), message);
+	}
 
 	ast_free(datastore_id);
 
@@ -1162,7 +1173,6 @@ static int mixmonitor_exec(struct ast_ch
 	struct ast_flags flags = { 0 };
 	char *recipients = NULL;
 	char *parse;
-	RAII_VAR(struct stasis_message *, message, NULL, ao2_cleanup);
 	AST_DECLARE_APP_ARGS(args,
 		AST_APP_ARG(filename);
 		AST_APP_ARG(options);
@@ -1283,12 +1293,6 @@ static int mixmonitor_exec(struct ast_ch
 		ast_module_unref(ast_module_info->self);
 	}
 
-	message = ast_channel_blob_create_from_cache(ast_channel_uniqueid(chan),
-		ast_channel_mixmonitor_start_type(), NULL);
-	if (message) {
-		stasis_publish(ast_channel_topic(chan), message);
-	}
-
 	return 0;
 }
 
@@ -1298,7 +1302,9 @@ static int stop_mixmonitor_full(struct a
 	char *parse = "";
 	struct mixmonitor_ds *mixmonitor_ds;
 	const char *beep_id = NULL;
+	const char *datastore_id = NULL;
 	RAII_VAR(struct stasis_message *, message, NULL, ao2_cleanup);
+	RAII_VAR(struct ast_json *, blob, NULL, ast_json_unref);
 
 	AST_DECLARE_APP_ARGS(args,
 		AST_APP_ARG(mixmonid);
@@ -1322,6 +1328,12 @@ static int stop_mixmonitor_full(struct a
 
 	ast_mutex_lock(&mixmonitor_ds->lock);
 
+	if (ast_asprintf(&datastore_id, "%p", mixmonitor_ds) == -1) {
+		ast_log(LOG_ERROR, "Failed to allocate memory for MixMonitor ID.\n");
+		ast_mutex_unlock(&mixmonitor_ds->lock);
+		return -1;
+	}
+
 	/* closing the filestream here guarantees the file is available to the dialplan
 	 * after calling StopMixMonitor */
 	mixmonitor_ds_close_fs(mixmonitor_ds);
@@ -1356,13 +1368,17 @@ static int stop_mixmonitor_full(struct a
 		ast_beep_stop(chan, beep_id);
 	}
 
+	blob = ast_json_pack("{s: s}",
+		"mixmonitor_id", datastore_id);
 	message = ast_channel_blob_create_from_cache(ast_channel_uniqueid(chan),
-	                                             ast_channel_mixmonitor_stop_type(),
-	                                             NULL);
+		ast_channel_mixmonitor_stop_type(),
+		blob);
 	if (message) {
 		stasis_publish(ast_channel_topic(chan), message);
 	}
 
+	ast_free(datastore_id);
+
 	return 0;
 }
 
Index: asterisk-22.0.0/main/cel.c
===================================================================
--- asterisk-22.0.0.orig/main/cel.c
+++ asterisk-22.0.0/main/cel.c
@@ -323,6 +323,8 @@ static const char * const cel_event_type
 	[AST_CEL_LINKEDID_END]     = "LINKEDID_END",
 	[AST_CEL_LOCAL_OPTIMIZE]   = "LOCAL_OPTIMIZE",
 	[AST_CEL_LOCAL_OPTIMIZE_BEGIN]   = "LOCAL_OPTIMIZE_BEGIN",
+	[AST_CEL_MIXMONITOR_START] = "MIXMONITOR_START",
+	[AST_CEL_MIXMONITOR_STOP]  = "MIXMONITOR_STOP",
 };
 
 struct cel_backend {
@@ -1394,6 +1396,33 @@ static void cel_pickup_cb(
 }
 
 
+static void cel_mixmonitor_start_cb(
+	void *data, struct stasis_subscription *sub,
+	struct stasis_message *message)
+{
+	struct ast_channel_blob *obj = stasis_message_data(message);
+
+	if (!obj || !obj->snapshot || !obj->blob) {
+		return;
+	}
+
+	cel_report_event(obj->snapshot, AST_CEL_MIXMONITOR_START,
+		stasis_message_timestamp(message), NULL, obj->blob, NULL);
+}
+
+static void cel_mixmonitor_stop_cb(
+	void *data, struct stasis_subscription *sub,
+	struct stasis_message *message)
+{
+	struct ast_channel_blob *obj = stasis_message_data(message);
+
+	if (!obj || !obj->snapshot || !obj->blob) {
+		return;
+	}
+	cel_report_event(obj->snapshot, AST_CEL_MIXMONITOR_STOP,
+		stasis_message_timestamp(message), NULL, obj->blob, NULL);
+}
+
 static void cel_local_optimization_cb_helper(
 	void *data, struct stasis_subscription *sub,
 	struct stasis_message *message,
@@ -1577,6 +1606,16 @@ static int create_routes(void)
 		NULL);
 
 	ret |= stasis_message_router_add(cel_state_router,
+		ast_channel_mixmonitor_start_type(),
+		cel_mixmonitor_start_cb,
+		NULL);
+
+	ret |= stasis_message_router_add(cel_state_router,
+		ast_channel_mixmonitor_stop_type(),
+		cel_mixmonitor_stop_cb,
+		NULL);
+
+	ret |= stasis_message_router_add(cel_state_router,
 		ast_local_optimization_end_type(),
 		cel_local_optimization_end_cb,
 		NULL);
Index: asterisk-22.0.0/include/asterisk/cel.h
===================================================================
--- asterisk-22.0.0.orig/include/asterisk/cel.h
+++ asterisk-22.0.0/include/asterisk/cel.h
@@ -77,6 +77,10 @@ enum ast_cel_event_type {
 	AST_CEL_LOCAL_OPTIMIZE = 17,
 	/*! \brief A local channel optimization has begun */
 	AST_CEL_LOCAL_OPTIMIZE_BEGIN = 18,
+	/*! \brief a MixMonitor has been started on this channel */
+	AST_CEL_MIXMONITOR_START = 19,
+	/*! \brief a MixMonitor has been stopped on this channel */
+	AST_CEL_MIXMONITOR_STOP = 20,
 };
 
 /*!
